name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      skip_tests:
        description: 'Skip tests and lint checks'
        required: false
        default: false
        type: boolean
      deployment_message:
        description: 'Deployment message/reason'
        required: false
        type: string

jobs:
  manual-deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run quality checks
      if: ${{ !inputs.skip_tests }}
      run: |
        npm run lint
        npm run test

    - name: Build for ${{ inputs.environment }}
      run: npm run build
      env:
        NODE_ENV: production
        CKKS_API_URL: ${{ inputs.environment == 'production' && 'https://api.ckks.pl' || 'https://api-staging.ckks.pl' }}
        API: ${{ inputs.environment == 'production' && 'https://api.ckks.pl/api' || 'https://api-staging.ckks.pl/api' }}

    - name: Export static build
      run: npm run prod
      env:
        NODE_ENV: production
        CKKS_API_URL: ${{ inputs.environment == 'production' && 'https://api.ckks.pl' || 'https://api-staging.ckks.pl' }}
        API: ${{ inputs.environment == 'production' && 'https://api.ckks.pl/api' || 'https://api-staging.ckks.pl/api' }}

    - name: Deploy using deploy.sh script
      run: |
        if [ -f "./deploy.sh" ]; then
          chmod +x ./deploy.sh
          ./deploy.sh
        else
          echo "⚠️  deploy.sh script not found, using manual deployment"
          
          # Manual deployment steps
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          
          tar -czf ckks-deployment.tar.gz -C out .
          
          scp ckks-deployment.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            if [ -d public_html_backup ]; then
              rm -rf public_html_backup
            fi
            if [ -d public_html ]; then
              mv public_html public_html_backup
            fi
            
            mkdir -p public_html
            tar -xzf ckks-deployment.tar.gz -C public_html
            rm ckks-deployment.tar.gz
            
            devil www restart ckks.edu.pl
        EOF
        fi

    - name: Health check
      run: |
        sleep 30
        HEALTH_URL="${{ inputs.environment == 'production' && 'https://ckks.edu.pl' || 'https://staging.ckks.edu.pl' }}"
        curl -f "${HEALTH_URL}/api/course" || exit 1
        echo "✅ Deployment to ${{ inputs.environment }} successful"

    - name: Notify deployment
      run: |
        echo "🚀 Deployed to ${{ inputs.environment }}"
        echo "📝 Message: ${{ inputs.deployment_message }}"
        echo "⏰ Time: $(date)"
        echo "👤 Triggered by: ${{ github.actor }}"